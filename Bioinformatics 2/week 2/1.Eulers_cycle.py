import random

def EulerianCycle(my_dict):
    def random_walk(node):
        cycle = [node]
        while True:
            neighbors = my_dict[node]
            if not neighbors:
                break
            next_node = my_dict[node].pop(random.randint(0, len(my_dict[node])-1))
            cycle.append(next_node)
            node = next_node
        return cycle

    start_key = random.choice(list(my_dict.keys()))
    current_cycle = random_walk(start_key)

    while any(neighbors for neighbors in my_dict.values()):
        # Find a node with unexplored edges in the current cycle
        new_start = next(node for node in current_cycle if my_dict[node])

        # Form a new cycle by traversing the current cycle
        index = current_cycle.index(new_start)
        new_cycle = random_walk(new_start)

        # Update the current cycle by merging the new cycle
        current_cycle = current_cycle[:index] + new_cycle + current_cycle[index + 1:]

    result = " ".join(map(str, current_cycle))
    return result

input_string = """
0: 1 264
1: 3 383 594
10: 29 4
100: 102
101: 44
102: 101
103: 60 784 916
104: 105
105: 103 385
106: 107 123
107: 173 68
108: 106
109: 111
11: 12 16
110: 168 377 509 93
111: 110
112: 420 76
113: 112
114: 113 145
115: 117 170 247
116: 227 54
117: 116 346 977
118: 95
119: 118
12: 10
120: 119
121: 106 390
122: 121 313
123: 122
124: 126 428 990
125: 440 47
126: 125 855
127: 129
128: 127 155 714 752
129: 745 90
13: 19 6 96
130: 95
131: 130 190 682
132: 131
133: 135
134: 22 332
135: 134
136: 205 245 88
137: 138 796
138: 136
139: 527 89
14: 15 23
140: 139
141: 140
142: 144 520
143: 142
144: 6
145: 147
146: 114
147: 146 176 225 361
148: 149 422
149: 52
15: 13 304 38 766
150: 148 163
151: 55
152: 151 238
153: 152 271
154: 128
155: 156
156: 154 524
157: 159
158: 299 63
159: 158 213 619
16: 18 27 59 77
160: 161
161: 162
162: 21 276
163: 164
164: 165
165: 150
166: 167 194
167: 110
168: 166 180 652
169: 115 318 328
17: 11 297
170: 171
171: 169
172: 107
173: 174
174: 172
175: 147
176: 177
177: 175 447
178: 168
179: 178
18: 17 503
180: 179 218
181: 182
182: 233 92
183: 181 463
184: 5
185: 184 575
186: 185 371
187: 95
188: 189 204
189: 187
19: 21 404
190: 191 703
191: 192
192: 131
193: 166
194: 195 775
195: 193
196: 197
197: 198
198: 75
199: 201
2: 0 4
20: 13 35
200: 199
201: 97
202: 203
203: 188
204: 202 435
205: 207 310
206: 136
207: 206 251 380
208: 209
209: 210
21: 160 20 282
210: 58
211: 159 293
212: 211
213: 212 453 670
214: 78
215: 216
216: 214 307
217: 180
218: 219 391 971
219: 217
22: 133 14
220: 222
221: 86
222: 221
223: 224
224: 147 425
225: 223 243 641 872
226: 228
227: 226 827
228: 116 324 656
229: 41
23: 24 66
230: 231
231: 229 618
232: 234
233: 232 442
234: 182 411
235: 77
236: 235 506
237: 236
238: 240
239: 152 606
24: 22 44
240: 239
241: 242 289
242: 225
243: 241 869
244: 136
245: 246
246: 244 866
247: 248
248: 249 959
249: 115
25: 26 278 351
250: 252 265
251: 250 622
252: 207 533
253: 254
254: 255
255: 570 87
256: 43
257: 256
258: 257
259: 261
26: 16
260: 259
261: 555 89 991
262: 0
263: 262
264: 263
265: 267
266: 250
267: 266 335
268: 269
269: 37
27: 25
270: 268
271: 272 580
272: 273
273: 153
274: 275 354
275: 162
276: 274
277: 279
278: 277 750
279: 25 821
28: 30
280: 281 934
281: 21
282: 280 320 632
283: 285
284: 283 344
285: 66
286: 288 758
287: 286
288: 58 937
289: 290
29: 28 461 90
290: 291 395
291: 241
292: 294
293: 292 413
294: 211 660
295: 296 590
296: 17 448
297: 295
298: 300
299: 298
3: 2 408
30: 10
300: 158 689
301: 303
302: 82
303: 302 756
304: 305 337 695
305: 306 357
306: 15
307: 309
308: 216
309: 308
31: 32 374 480
310: 312
311: 205
312: 311 486
313: 314
314: 315
315: 122
316: 317
317: 169 773
318: 316
319: 321
32: 33 87
320: 319
321: 282 561
322: 228
323: 322 494
324: 323
325: 327
326: 325
327: 45
328: 330
329: 169
33: 4
330: 329
331: 134 473
332: 333
333: 331
334: 267
335: 336
336: 334
337: 338
338: 339 468 711
339: 304
34: 20 415
340: 476 48
341: 340
342: 341
343: 284
344: 345
345: 343
346: 348
347: 117
348: 347
349: 25
35: 36 531 75
350: 349
351: 350
352: 274
353: 352
354: 353
355: 356 368
356: 305
357: 355 578
358: 62
359: 358
36: 34
360: 359
361: 362
362: 363
363: 147
364: 365
365: 61
366: 364
367: 355
368: 369
369: 367
37: 15 270
370: 186
371: 372 735
372: 370
373: 375
374: 373
375: 31 638
376: 110
377: 378
378: 376 763
379: 381 661 742 847 997
38: 39 455
380: 379
381: 207
382: 1 550
383: 384
384: 382
385: 387
386: 105
387: 386
388: 121
389: 388 985
39: 37
390: 389
391: 392
392: 393 646 721
393: 218
394: 396
395: 394
396: 290 544
397: 398
398: 399
399: 58
4: 11 31 41 48 5
40: 4 56
400: 57
401: 400 614 975
402: 401
403: 405 924
404: 403
405: 19
406: 3 471
407: 406 969
408: 407 517 834
409: 234
41: 230 42 665 69
410: 409 843
411: 410
412: 293
413: 414
414: 412
415: 417
416: 34 497
417: 416
418: 419
419: 112 514
42: 40
420: 418
421: 148 487
422: 423
423: 421
424: 426
425: 424
426: 224 547
427: 429
428: 427 806
429: 124 432
43: 24 258 562
430: 431
431: 429
432: 430 835
433: 204 863
434: 433 536
435: 434 667
436: 438
437: 436
438: 58 635
439: 441 729
44: 100 45
440: 439
441: 125 699
442: 444
443: 233 679
444: 443 541
445: 177
446: 445 678
447: 446
448: 449
449: 450
45: 326 43
450: 296
451: 452 588
452: 213
453: 451
454: 38
455: 456
456: 454
457: 458
458: 459
459: 61
46: 4 79
460: 29
461: 462
462: 460
463: 464
464: 465
465: 183
466: 338 557
467: 466
468: 467 799
469: 406 608
47: 124 46 628
470: 469
471: 470
472: 474
473: 472 814
474: 331
475: 477
476: 475
477: 340
478: 31 838
479: 478
48: 342 47
480: 479
481: 49
482: 481
483: 482
484: 485 719
485: 312
486: 484
487: 489 597
488: 421 895
489: 488
49: 483 6
490: 63
491: 492
492: 490 512 940
493: 323
494: 495 819
495: 493
496: 498
497: 496 573
498: 416 957
499: 500
5: 186 6 8
50: 51 53 599
500: 501
501: 74
502: 504 899
503: 502
504: 18
505: 236
506: 507 585
507: 505
508: 110
509: 510
51: 49
510: 508
511: 492
512: 513
513: 511
514: 515
515: 516
516: 419
517: 519
518: 408
519: 518
52: 150 50
520: 522
521: 142
522: 521
523: 156 675
524: 525
525: 523
526: 139
527: 528 566 791
528: 526
529: 35
53: 54
530: 529
531: 530 686
532: 534 810
533: 532
534: 252
535: 434
536: 537
537: 535 707
538: 540
539: 538
54: 115 52 63
540: 64
541: 543
542: 444
543: 542
544: 545
545: 546
546: 396
547: 549
548: 426
549: 548
55: 153 40 70
550: 552
551: 382
552: 551
553: 554
554: 261
555: 553 905
556: 558
557: 556
558: 466
559: 321
56: 57 82
560: 559
561: 560
562: 564
563: 43
564: 563
565: 527
566: 567
567: 565
568: 255
569: 568
57: 402 55
570: 569
571: 497 980
572: 571
573: 572
574: 576
575: 574
576: 185 803
577: 357 610
578: 579
579: 577
58: 208 287 397 437 60
580: 582
581: 271
582: 581
583: 506
584: 583 725 761
585: 584
586: 587
587: 451
588: 586
589: 295
59: 58
590: 591
591: 589
592: 593 858
593: 1
594: 592 602
595: 596
596: 487
597: 595
598: 50
599: 600
6: 14 143 2 50
60: 104 16 91
600: 598
601: 594
602: 603
603: 601
604: 605
605: 239 651
606: 604
607: 609
608: 607 626
609: 469
61: 366 457 54 860
610: 611
611: 612
612: 577
613: 615
614: 613
615: 401 880
616: 231
617: 616
618: 617
619: 621
62: 360 61
620: 159 732
621: 620
622: 623 994
623: 624
624: 251
625: 608
626: 627 892 947
627: 625
628: 630
629: 47
63: 157 491 62 949
630: 629
631: 633
632: 631
633: 282
634: 636 645
635: 634 736
636: 438
637: 375
638: 639
639: 637 740
64: 539 65 795
640: 642
641: 640 874
642: 225
643: 644
644: 634
645: 643 825
646: 648 702
647: 392
648: 647
649: 650
65: 23
650: 605 886
651: 649
652: 654
653: 168
654: 653
655: 228
656: 657 910
657: 655
658: 659
659: 294
66: 284 64
660: 658 907
661: 663
662: 379 691
663: 662
664: 666
665: 664 771
666: 41
667: 668
668: 669
669: 435
67: 68
670: 672
671: 213
672: 671
673: 674
674: 523 883
675: 673
676: 446
677: 676
678: 677
679: 681
68: 108 41
680: 443
681: 680
682: 683
683: 684
684: 131
685: 531
686: 687
687: 685
688: 690
689: 688
69: 67 925
690: 300
691: 693
692: 662
693: 692
694: 304
695: 696
696: 694
697: 698
698: 441
699: 697
7: 5
70: 71
700: 701
701: 646
702: 700
703: 705 983
704: 190 913
705: 704
706: 708
707: 706
708: 537
709: 338 778
71: 72
710: 709 782 889
711: 710
712: 128
713: 712
714: 713
715: 97
716: 715
717: 716
718: 484
719: 720
72: 55 930
720: 718
721: 723
722: 392
723: 722
724: 726
725: 724
726: 584
727: 439
728: 727
729: 728
73: 35
730: 620
731: 730
732: 731
733: 371
734: 733
735: 734
736: 738
737: 635
738: 737
739: 639
74: 499 73
740: 741
741: 739
742: 744
743: 379
744: 743
745: 747
746: 129 964
747: 746
748: 278 829
749: 748
75: 196 74
750: 749
751: 128
752: 753
753: 751
754: 303
755: 754
756: 755
757: 759
758: 757
759: 286
76: 114 16
760: 762
761: 760
762: 584 961
763: 765
764: 378 789
765: 764
766: 767
767: 768
768: 15
769: 665
77: 237 78
770: 769
771: 770
772: 317
773: 774
774: 772
775: 776 845
776: 777 903
777: 194
778: 780
779: 709 920
78: 215 76
780: 779
781: 710
782: 783
783: 781
784: 786
785: 103
786: 785
787: 788
788: 764
789: 787
79: 80
790: 792
791: 790
792: 527
793: 64 878
794: 793
795: 794
796: 797
797: 798
798: 137
799: 800 852
8: 9
80: 81
800: 801
801: 468
802: 576
803: 804
804: 802
805: 428
806: 807
807: 805
808: 532
809: 808
81: 46
810: 809
811: 813
812: 811
813: 88 945
814: 815
815: 816
816: 473
817: 818
818: 494
819: 817
82: 301 84
820: 279
821: 822
822: 820
823: 824
824: 645
825: 823
826: 227
827: 828
828: 826
829: 831
83: 56
830: 748
831: 830
832: 833
833: 408
834: 832
835: 836
836: 837
837: 432
838: 840
839: 478
84: 83
840: 839
841: 842
842: 410
843: 841
844: 846
845: 844
846: 775
847: 849
848: 379
849: 848
85: 86
850: 799
851: 850
852: 851
853: 854
854: 126
855: 853
856: 857
857: 592
858: 856
859: 61
86: 220 32
860: 861
861: 859
862: 433
863: 864
864: 862
865: 867
866: 865
867: 246
868: 243
869: 870
87: 253 85 99
870: 868
871: 225
872: 873
873: 871
874: 875
875: 876
876: 641
877: 793
878: 879
879: 877
88: 137 29 812
880: 882
881: 615
882: 881
883: 885
884: 674
885: 884
886: 888
887: 650
888: 887
889: 891
89: 141 260 88
890: 710
891: 890
892: 894
893: 626
894: 893
895: 897
896: 488
897: 896
898: 502
899: 900
9: 7
90: 128 89
900: 898
901: 902 953
902: 776
903: 901
904: 555
905: 906
906: 904
907: 908
908: 909 933
909: 660
91: 93
910: 911
911: 912
912: 656
913: 915
914: 704
915: 914
916: 917
917: 918
918: 103
919: 921
92: 183 60
920: 919
921: 779
922: 403
923: 922
924: 923
925: 926
926: 927
927: 69
928: 929
929: 72
93: 109 92
930: 928
931: 908
932: 931
933: 932
934: 935
935: 936
936: 280
937: 938
938: 939
939: 288
94: 13
940: 942
941: 492
942: 941
943: 944
944: 813
945: 943
946: 626
947: 948
948: 946
949: 951
95: 120 132 188 94
950: 63
951: 950
952: 954
953: 952
954: 901
955: 498
956: 955
957: 956
958: 960
959: 958
96: 95
960: 248
961: 963
962: 762
963: 962
964: 966
965: 746
966: 965
967: 407
968: 967
969: 968
97: 200 717 87
970: 972
971: 970
972: 218
973: 401
974: 973
975: 974
976: 978
977: 976
978: 117
979: 571
98: 97
980: 981
981: 979
982: 703
983: 984
984: 982
985: 987
986: 389
987: 986
988: 989
989: 124
99: 98
990: 988
991: 993
992: 261
993: 992
994: 996
995: 622
996: 995
997: 999
998: 379
999: 998

"""

# graph_input = {int(node): list(map(int, neighbors.split())) if neighbors else [] for node, neighbors in [line.split(':') for line in input_string.split('\n') if line]}



my_dict = {}
lines = input_string.split("\n")
# print(lines)
for line in lines:
    if not line:
        continue
    parts = line.split(":")
    # print(parts)
    key = int(parts[0].strip())
    # print(key)
    values = [int(val.strip()) for val in parts[1].split()]
    # print(values)
    my_dict[key] = values if len(values) > 0 else None




print(EulerianCycle(my_dict))
