# first, import the random package
import random


# Input:  Integers k, t, and N, followed by a collection of strings Dna
# Output: GibbsSampler(Dna, k, t, N)
def GibbsSampler(Dna, k, t, N):
    BestMotifs = RandomMotifs(Dna, k, t)
    BestMotifsScore = Score(BestMotifs)

    for j in range(1, N + 1):
        i = random.randint(0, t - 1)
        motifs_except_i = BestMotifs[:i] + BestMotifs[i + 1:]

        profile = ProfileWithPseudocounts(motifs_except_i)

        new_motif = ProfileGeneratedString(Dna[i], profile, k)

        temp_motifs = BestMotifs[:]
        temp_motifs[i] = new_motif
        temp_motifs_score = Score(temp_motifs)

        if temp_motifs_score < BestMotifsScore:
            BestMotifs = temp_motifs
            BestMotifsScore = temp_motifs_score
    return BestMotifs


# place all subroutines needed for GibbsSampler below this line
def RandomMotifs(Dna, k, t):
    random_motifs = []
    # place your code here.
    for i in range(t):
        debut = random.randint(0, len(Dna[i]) - k)
        kmer = Dna[i][debut: debut + k]
        random_motifs.append(kmer)
    return random_motifs


def Normalize(Probabilities):
    # your code here
    proba_norma = {}
    total = sum(Probabilities.values())
    for key, value in Probabilities.items():
        proba_norma[key] = value / total

    return proba_norma


def WeightedDie(Probabilities):
    kmer = ''  # output variable
    # your code here
    random_number = random.uniform(0, 1)
    prob_add = 0
    for kmer, prob in Probabilities.items():
        prob_add += prob
        if random_number < prob_add:
            return kmer


def Pr(Text, Profil):
    # insert your code here
    p = 1
    for i in range(len(Text)):
        base = Text[i]
        p *= Profil[base][i]

    return p


def ProfileGeneratedString(Text, profile, k):
    # your code here
    n = len(Text)
    probabilities = {}
    for i in range(0, n - k + 1):
        probabilities[Text[i:i + k]] = Pr(Text[i:i + k], profile)
    probabilities = Normalize(probabilities)
    return WeightedDie(probabilities)


def CountWithPseudocounts(Motifs):
    k = len(Motifs[0])
    count = {'A': [0] * k, 'C': [0] * k, 'G': [0] * k, 'T': [0] * k}
    for motif in Motifs:
        for i in range(k):
            count[motif[i]][i] += 1
    # Ajouter les pseudo-comptes
    for liste in count.values():
        for j in range(len(liste)):
            liste[j] += 1
    return count


def ProfileWithPseudocounts(Motifs):
    t = len(Motifs)
    counts = CountWithPseudocounts(Motifs)
    profile = {}
    for base in "ATCG":
        profile[base] = []
        for valueinlist in counts[base]:
            freq = valueinlist / (t + 4)
            profile[base].append(freq)
    return profile


def Score(Motifs):
    consensus = Consensus(Motifs)
    score = 0
    for motif in Motifs:
        for j in range(len(consensus)):
            if motif[j] != consensus[j]:
                score += 1
    return score


def Consensus(Motifs):
    consensus = ""
    for i in range(len(Motifs[0])):
        column = []
        for motif in Motifs:
            column.append(motif[i])
        most_common_base = max(set(column), key=column.count)
        consensus += most_common_base
    return consensus

# Sample DNA to test the function
Dna = "CGAGTGACACCTCGTCTTTGATTATGTGCCCACGAAGGAGCTGAAATATATCACGGACGTCGCGTCTGCAGGTCAGGCAGTTTCAGCCATCCTACCCTCCGCGGAGAACCCTGTAAGCTGACCACTAAGCCCGGGGCTGGTTGGATCACGGGAGTCACCACAGGCATATTCCGCTTAACTGCATGCAAATACTTTCGGATCCCCCACCCCCACAATCCCCAAGGTAGTGCGTTGTGCGGCGTCATGCTAAGAGAAACGCTTCGCTAGGAGGTTGTGGCCGGAAGTGCAGTTCCTGATTAGTCATACGAGTGACACCTCGT CTTTGATTATGTGCCCACGAAGGGACATTATGGAATGAAGCTGAAATATATCACGGACGTCGCGTCTGCAGGTCAGGCAGTTTCAGCCATCCTACCCTCCGCGGAGAACCCTGTAAGCTGACCACTAAGCCCGGGGCTGGTTGGATCACGGGAGTCACCACAGGCATATTCCGCTTAACTGCATGCAAATACTTTCGGATCCCCCACCCCCACAATCCCCAAGGTAGTGCGTTGTGCGGCGTCATGCTAAGAGAAACGCTTCGCTAGGAGGTTGTGGCCGGAAGTGCAGTTCCTGATTAGTCATACGAGTGACACCTCGT CCAATTGTTCGTTGATTAGACCACATGGTTGGAATTGTTGCCCTCTCATCTACTAACGGTAGGCGAGCCTGGGGTCTCCTTGATAGGTGTACCAGGTTGTGCAGAAAATTAATTTTGACGTGGTAATATATTTAATTTCTCGGAATGGTTTCGCCTAGAGCGCATCTGGGTCGCCCAAAAAATCCCGGCCTGTCGTCATCTGGGGCCTGCGCTCGCGGTGACGTGCCCCAATTATTCATAATAACTATATCAATCTCACTCGACTCCGCCGTTGATTGAGCTATGACTTGACCGTCTTTGGAACGTGAAAAGTGCCCGTG TCAGTGAATCCTCGAAGCTGTACTGCTCCATTCCGGATTAGTGATCTCGTATTATATTGTCCGCGATTAGATAGGGTTGATACGTTCGAAGGCTGAGGACGCTGTCGGCTAGGCTTCGACGATCGTTCTAGCCCCGCGGTGTAATTACAATTCAGGACCACATGGAGGAATAGTATGTGGCATCTGCTGAACGTACTTGCTACTCTACATTGTTACGTATAATGAATTATGAACTGCGAACGCGATATGCAGCTATACACGGGTGCATCTGGGTTTAAACCGTCTTGACACCATCGATAAGTTAATCTCTCAACACGTAG TCACTTCAGATTAGAAAGGTCCCCGAGATCTATCGCCCCTCCCAGCGACGCGTAAGACGAGCGGATACTCAATGAGGTTGATCGGTACTAGAGAGCTCCGTAGTTAGCCAGCGTCAAGGCCAAACATGTCTGACCGACCACGCTGAATGAAGTGGACCAAGTTTTTGACACCGCTTGCATCCGAGGCATACCGCGGTTGGGTGGATGCAAACAGTTTGCGCAAGTTCTCGCCACCTCCGCCTCCTGTACTCACGTCTCGGTCAACGGGGCCGGCGTCTAGTGGAACCATACGGCTCTACACGTTTGTCAGTCCCGCGCAC TTGAAAGTGAAGAATAATGTAGAGCGTACTCTACATGAAGATGAGCCTGGTATCAGTAGCAGATATATTGGTGTAGCCTTGCCCTTCGCGCGTTGTAATGACGATCATCAACTTTTGTACCGGGGAACGTTTGAAACTCCAAGATCCCGCTTGTCCTGAAGTTGCGCCATAGGCTGTGAACATTGATGCTGAGTCACTAATCCCCTGCAATTTCTTATCATTCACAGCACAGATCCACATGGAATGGCCGTTCGTAGTCCCCGTAGTTCAAGATATTTCCCCCTATTCCCTTCGGAGAATGGAGCGGGCGTTCAGCCCAA TGCAGAGGTCAGCCATTACACAACCTTTCTAACGGCACCCGCAGTCCTAAGTAGAGTATTAAGCCCGACAAAGTATTAGGTCACTATATAGTGGCCCTGCAAATCTGAGACTATGTTAAAGAATCTTACTTGACTCGCGTAAGTGACCACACTTAATGAACGATCTAGCCCTTTCAAAGTACCTGGTTAATACGGAGATAGCTAGTACGGTGGAGACTACGCCCGTTTGAGAACTGGGCCTGGGGTGTTTCCCCTCAGCGGAACAGGTGGCGGATGAAACGGCTAACCCTCAATAGGGTCGTTAGAAGAACCGTGTTTGC GTGCTTACGCTGTGTTAACCCTAAACCTAGAAGTTTACTAGCGTTGGGGGATCCGTACCCCAGATGAATCAGCCGCGGAATGGCTCGTAGGATGCCCAAAGGTACCTAGACACATTACACGGGAGGTGGACAGATGGAGGGGGAGCGAGCGCATGTCCGGGGCGGCAAGTGTTCAGGGAGGACCACATACCATGACCCGTGATTAGTTTCAGGTAGGATCGGAGTGGGACTGTGTATTAACCTGTCGCCTCATGCGCTTTGAAGTAATATGAGCGGACGCGACTTTTCTAATTTGGCGCCTTGTGCTTATAACCCAGGCC AAAATGCAACACCGCACGAGGGCGTCGACCAGCCGGAATGAAGGGAACCTCTAGAGCCAGCGGTCTCATAATTTGTGGTGTGGGCTCAGGTAATGGTAGTGGCAGCATAGTTCTTAACGTCTATGAAGTCATATCCCATACGTATGTGCGTCCTACCCACTTACAGTGATCTGCTCTTGGGGCCCCAAGTCCTCTTCTCCCGAGTCGGTTCCGCGCTTGCCCATCGACGTTACGGGGGGTCTTGTAATGATCTAGGCGCGAGGCTTATATAGGCTAGTCGGTTGGAATAGGATCTCCTGAACTGCAGATCCCGTGCAGGT TTTCTGGTGACAGCCCACGGGTCGGGAAATAATGGCTTCTAGAACACGATGTGGGATAAGGCGCGCAACCCGCATCGACGTGCCTAACGACAATTGAGCCTACCCCCCGACTAATTGACTGCCCCCCCACGCAGCGCCGTCGATTCATGCCTTTGTATAGTGCTCTGAACAATGACTTTTGCGCGGTTGATCGTCGACCAGCCAGTATCGAAGACGACCGTTTGGAATGAGCGTCCGCCCCACGGAGGCTTGCTGAAATCGGGCCCAGAGAAATCTACGTAATCGATTATGACATCTACTAACCAAGATCAGACATTGGG CGAGTTACACGCTATCAACCCGTTTCACCACATGGAATATATCTGCCATAAATGGGAAAACCTCGAAACGTTCACACTACATTACCATACGTGTAAGCGGGTACTGATGCCGAGGGCAGAGCCCTTTAGTCTGGCCGCATCGCTCCTAATTGTTCTTTGATCAATACACACGTAGCATCTCTTGTCTGAGTTTGGGGAGGAAATCCTTCAGCAGTGCCGATATTAAGCTTACATGGGGGGTTGGTACATACACCCCTCACCCCTAAGTGCCTGAGTTCTTGGTATGACATATTTTCATGCTTGAGCCCTATAACGTGTCG GTGGCGTCATCACTGTGGTGGACGGACTGACCTAATATTAAGCAAACCGAGACAAAGCCGTCTAGGCTAAACCCCAGGGGCCCCCTGGCAGGTCAACGACAGCACTGTTGTGATGCATCGCATTCCTCAATGACCTTTTGGAATGACGCTTCTCATCTAAACCCTCACCTATGGCTGGGCTGTTCTAGGGAGGTAAGACTTACGCGACCCTATGTTTACGGGGAGTGCCGTAGCTGAACTGAGCACCATGTTCTAGTTAGGTTTAGTGTATGGCTGACTAACAGTATCATGTCGATCTGCGATGCCTGAACATGGAATGC GGGGCGTACGAATACCTCGTGAAGTAATGATCGGTTGCATGTCGGGTCTGCTCCAGGGACATGCTTGTGGTCGCGTACCGCGGCCCACCACGGTACACGGCGGTTGCCGCTCTATGTTACGAGTGGAGCCACTCATGTTTCTTGCGATCAGGTTCGTGAGCACATAACATGTGTAACGGACCTTCATGACCCGCCGCAAGATAACAGGAGCGGCGTGGTCAGACATAGGTCCCGACTTCTCACATGGAATGATGTCGTCAAACGGGAGCTTTACTCCGTCGCCTGGATAAAAGTCGTTGGGCGGCCATGGATAGAGTATG GTCGATTGCCCACGTCATACAGGTCTCATCGATCCCACTGTTGACATGGAATGAATAGACTTCATTATGAAGACTCGGTTCAACCATTACAAGATTGCATCCGACCTTATCTTGAGAATCAGTGTCGAACGGTTACGTCCAATCTCACCTCATTCTCATCTATGGCAAGGTCGAACACGGGACTATTTGTGGCTCGACGGTTGCGCCGCAATTTCCTTTCGTTGGCGATTTTCTCTGCCTTCGATGCAGACCGCGTGGGACCCGTCGGGGTTTAACGACGTATAAGCACACAGATCCAAAGAAACGCAACTCATCTAAAT TTTGTACTTACTACTACAGATAACACCAAGGACCGTCCCTTCTCTACATCTGTCCGCGGCTTATATTCTCATTGTAATTTGCACTACTGAGGAAGTTGAAACTGTTAAGTGCACCCTGGTTCCATAGCGATACTAACCTATACATGCGACCATATCGCGGCTTTCACATGTGTACTGGCCTCCTTGCGAGGAGTACGAATGAACATAGAAGGCAGCAACCGAGACCCGGTGATTAGGTAACAATGGTCGTAACGCCTCGCGACAGACTCGATGGAATGAAGTCAGTCCTGAAGGGTTGGTGGTGGGATGGCTAGGAGTGA GGATTATGAAGATGCAGAGCAGTACACCGCGAATCCGTAAACCTCGTGACCACATGCCGTGACTTAGCGCCGTTGCGGGCACCCATGGAAAGGATCTCCCCGTCATACCTGCCTTCAGTAACTGATCGAGTCTCGGGCCAAGCTATTTGGTATTCGGCGGTAGAGAGCCTGGGTACGCTATTGCATGCAGAACGACACATTTATACAATGTAGACGTCGAAACACTTACGAGGGTCAATACGTATAGCGTGTTCAGGAGACTTTAACCTTTGCAGCCTAGCCGAGAGAGTCTGTAGTCGACCATTAAGTGAACCAAATGG TATGGGCTGTTACGGGCTTAATGATTCCCTAACCCCTGCTTTTATTAGGATAGATGAAGTTGTCCCTCGCCCCTCGAGCGTTTCGACCACTACGAATGACCTTTCTGTAAAGAATATCTTAGAGCCGACGAAGCAGCATACGAAACCGTCGCACCTTGCAGTAACACGACTACCATGTGCGACATCGGCACTGCAAATAGAACTCCCTCTTGAAAAACTAGAGGATATTCCTGATGGTGCACATAAGACCAGAAAATCCGCCAGCGGTACGATGCCCTGCCTCCGTGGGCGTTAGATGGTGGCAGCTTGAAACGTCGACT AAAGACTATACCTCCATAACGCCATCCGGCAGTTCAGTGGGAGTTGAAACACATGAGCATGGACCATCACTATGATGTACGGGCTTGTATCTAAAAGTGTTCCACCGAGTTACAAAAGCACAGTTTAGGCAGCTCTCGAGAAAGTGGTTAAATTCCTTCCATAAGCTAAGTAAAGCAGTTCACAACGACCACATGGAAGAGTGCAATTAACGAAGGTAGTTGTCTTATTAAGGTGACGTCCAGAAGCTGCAGTACCAAAGTGGTTTAATAAGGGTCTAAAGTTAACAGAGCATCGAAACTGGTCGTCTGCGACCCAAATG GAAAACCTCGTGTGTCGTATACATCTTGCCGCATTAGTAGCTCCCGCTTCCATATACTGACCAGCCGGAATGAGCGGTGTTCGATACATTTAACTTGAGCTCTCAAGACGCGCCCTCCTCAAATGGCGGCATCTAACTTTATTCGAAAAACGGGGAATTTCGCCTCCCGAGATCGAAACAAAGATGGCCTACGGTACCAACCTCTAACCTGGGGGATAGTCTATTCAATTATGTGACCCGATCTGCTCGTAACCGTCGAGACCACCAATGCCCAGGCCCTGCGCCACGAGCGTTAGCGTTCAGAATGGGACAGACCTGTA TTTACACTTCCCAAGATGGCCGGCCTTTTCCAGATTAGTTGCTGACGCACCGAACTGGAGTTTGGTGGGTCGTCGCGCACCAGTCGCCTACCGTCACAGTGGTCAACGAGCAAGCATGGCTGCCGCAAAGTGGCAAATCGTGAGGCCATGGAATGAGCTGTGCCTAGACTTTGTACGACCATCCATGTTTTACCGGTGATAGAGCGTGAGAAGCTCTTATCTTACTCCAACGGTTACTCTGTGAAAAACAATTAATGACTTCAAAACTTGGGCTTCGATATTACTGTCGGGTTTCGTGCCGCGAGTAGACTCAAGCAGCA".split()
# set t equal to the number of strings in Dna, k equal to 15, and N equal to 100 to test function
k = 15
t = 20
N = 2000

BestMotifs_set = GibbsSampler(Dna, k, t, N)
print(" ".join(BestMotifs_set))
# print(Score(BestMotifs_set))